.data
.align 2

.text
gcd:
addiu $sp, $sp, -24
sw $ra, 12($sp)
sw $a0, 16($sp)
sw $a1, 20($sp)
addiu $v0, $sp, 20
lw $v0, 0($v0)
sw $v0, 0($sp)
li $v0, 0
lw $t0, 0($sp)
xor $v0, $t0, $v0
sltiu $v0, $v0, 1
beq $v0, $0, .L2
addiu $v0, $sp, 16
lw $v0, 0($v0)
j .L1
j .L3
.L2:
addiu $v0, $sp, 20
lw $v0, 0($v0)
add $a0, $v0, $0
addiu $v0, $sp, 16
lw $v0, 0($v0)
sw $v0, 0($sp)
addiu $v0, $sp, 16
lw $v0, 0($v0)
sw $v0, 8($sp)
addiu $v0, $sp, 20
lw $v0, 0($v0)
lw $t0, 8($sp)
div $t0, $v0
mflo $v0
sw $v0, 4($sp)
addiu $v0, $sp, 20
lw $v0, 0($v0)
lw $t0, 4($sp)
mult $t0, $v0
mflo $v0
lw $t0, 0($sp)
subu $v0, $t0, $v0
add $a1, $v0, $0
jal gcd
j .L1
.L3:
.L1:
lw $ra, 12($sp)
addiu $sp, $sp, 24
jr $ra
main:
addiu $sp, $sp, -24
sw $ra, 8($sp)
addiu $v0, $sp, 20
sw $v0, 0($sp)
jal input
lw $t0, 0($sp)
sw $v0, 0($t0)
.L5:
addiu $v0, $sp, 20
lw $v0, 0($v0)
sw $v0, 0($sp)
li $v0, 0
lw $t0, 0($sp)
slt $v0, $v0, $t0
beq $v0, $0, .L6
addiu $v0, $sp, 20
sw $v0, 0($sp)
addiu $v0, $sp, 20
lw $v0, 0($v0)
sw $v0, 4($sp)
li $v0, 1
lw $t0, 4($sp)
subu $v0, $t0, $v0
lw $t0, 0($sp)
sw $v0, 0($t0)
addiu $v0, $sp, 12
sw $v0, 0($sp)
jal input
lw $t0, 0($sp)
sw $v0, 0($t0)
addiu $v0, $sp, 16
sw $v0, 0($sp)
jal input
lw $t0, 0($sp)
sw $v0, 0($t0)
addiu $v0, $sp, 12
lw $v0, 0($v0)
add $a0, $v0, $0
addiu $v0, $sp, 16
lw $v0, 0($v0)
add $a1, $v0, $0
jal gcd
add $a0, $v0, $0
jal output
j .L5
.L6:
.L4:
lw $ra, 8($sp)
addiu $sp, $sp, 24
jr $ra


.text
.globl __crt_out_of_bounds
.globl output
.globl input

__crt_out_of_bounds:
li $v0, 10 # exit
syscall

output:
li $v0, 1  # print_int
syscall
li $a0, 0x0a
li $v0, 11 # print_char
syscall
jr $ra

input:
li $v0, 5 # read_int
syscall
jr $ra

